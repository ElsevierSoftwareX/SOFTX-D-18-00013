# Description of this simulation
description = string(default='A meaningful descripion of this model')
# Gas Constant
RGAS = quantity(units=J / mol / K, default='8.314 J / mol / K')
# Universal gravity constant
UG = quantity(units=N * m**2 / kg**2, default='6.672e-11 N * m**2 / kg**2')
# Acceleration in x
gx = quantity(units=m / s**2, default='0.0 m / s**2')
# Acceleration in y
gy = quantity(units=m / s**2, default='9.81 m / s**2')
# Viscosity minimum limit for rocks
etamin = quantity(units=Pa * s, default='1e+18 Pa * s')
# Viscosity maximum limit for rocks
etamax = quantity(units=Pa * s, default='1e+25 Pa * s')
# Lower stress limit for power law
stressmin = quantity(units=Pa, default='10000.0 Pa')
# Viscoelastic timestep
timemax = quantity(units=year, default='10000.0 year')
# Maximum number of gridsteps a Lagrangian Tracer can move
tracerMaxMove = float(min=0, max=5, default=1.0)
# Lagrangian Tracers moving algorithm
tracerMoveAlg = option(none, linear, runge-kutta, default=runge-kutta)
# Number of Lagrangian Tracers along X (width)
NumberOfTracersAlongX = integer(min=0, default=0)
# Number of Lagrangian Tracers along Y (depth)
NumberOfTracersAlongY = integer(min=0, default=0)
# Use phase change table
phase_change = boolean(default=False)
# Maximal temperature change allowed for one timestep
tempmax = quantity(units=K, default='20.0 K')
# Save every `save_every` evolution steps
save_every = integer(min=0, default=1)
# Starting step
step0 = integer(min=0, default=0)
# Ending step (excluded)
stepmax = integer(min=0, default=0)
# Use numerical Stress subgrid diffusion
stress_subgrid = boolean(default=True)
# Numerical Stress subgrid value
stress_subgrid_value = quantity(units=dimensionless, default='1.0 dimensionless')
# Use numerical Temperature subgrid diffusion
temperature_subgrid = boolean(default=True)
# Numerical Temperature subgrid value
temperature_subgrid_value = quantity(units=dimensionless, default='1.0 dimensionless')
# Apply shear heating
shear_heating = boolean(default=True)
# Apply adiabatic heating
adiabatic_heating = boolean(default=True)
# Pressure boundary conditions:
# onecell: pressure in one cell definition
# topbottom: pressure at the top and in the bottom of the channel
pressure_bc = option(onecell, topbottom, default=onecell)
# Cell boundary condition pressure
pressure_value = quantity(units=Pa, default='100000.0 Pa')
# Output file
output_file = string(default='model_output.hdf5')
# Log file
log_file = string(default='')
# Maximum number of iterations for temperature
temp_iter_max = integer(min=1, max=1000, default=100)
# Number of threads
num_threads = integer(default=1)
# Visco-elasto-plastic iteration
vep_iteration = option(local, global, default=local)
# Maximum number of Visco-elasto-plastic iterations
vep_max_iter = integer(min=0, max=100, default=1)
# Post process interpolation of Lagrangian Tracers to
# images
tracers2image = boolean(default=False)
# External configuration files blank separated
configFiles = string(default='')
# External file with Lagrangian Tracers distribution
tracersFile = string(default='')
# PETSc options for Stokes equations solver, one for line. e.g:
# mat_superlu_dist_colperm=PARMETIS
stokesSolver = string(default='$        ksp_type=preonly$        pc_type=lu$        pc_factor_mat_solver_package=superlu_dist$        mat_superlu_dist_colperm=PARMETIS$        mat_superlu_dist_parsymbfact=1$        ')
# PETSc options for Temperature equations solver, one for line. e.g: 
# mat_superlu_dist_colperm=PARMETIS
temperatureSolver = string(default='$        ksp_type=preonly$        pc_type=lu$        pc_factor_mat_solver_package=superlu_dist$        mat_superlu_dist_colperm=PARMETIS$        mat_superlu_dist_parsymbfact=1$        ')
    [Melting]
        # Enable melting
        enabled = boolean(default=False)
        # Melting model
        model = string(default='kelley')
        # Polyon defining melting region
        polygon = string(default='')
        # Melting fraction
        fraction = float(min=0, max=1, default=0.25)
        # Base rock lithology
        lithology = string(default='NoLithology')
    [Mesh]
        [[X]]
            # Width of the mesh in meters
            width = quantity(units=m, min=0, default='0 m')
            # Number of nodes in abscissa
            nodes = integer(min=0, default=0)
            [[[Distribution]]]
                [[[[__many__]]]]
                    # Starting point abscissa
                    start = quantity(units=m, min=-1, default='-1 m')
                    # Ending point abscissa
                    end = quantity(units=m, min=-1, default='-1 m')
                    # Step width/depth (0 for constant distribution, <0 for right to left)
                    step = quantity(units=m, default='0 m')
                    # Number of nodes
                    nodes = integer(min=2, max=10000, default=2)
        [[Y]]
            # Depth of the mesh in meters
            depth = quantity(units=m, min=0, default='0 m')
            # Number of nodes in depth
            nodes = integer(min=0, default=0)
            [[[Distribution]]]
                [[[[__many__]]]]
                    # Starting point abscissa
                    start = quantity(units=m, min=-1, default='-1 m')
                    # Ending point abscissa
                    end = quantity(units=m, min=-1, default='-1 m')
                    # Step width/depth (0 for constant distribution, <0 for right to left)
                    step = quantity(units=m, default='0 m')
                    # Number of nodes
                    nodes = integer(min=2, max=10000, default=2)
        [[Reference Point]]
            # Abscissa
            x = quantity(units=m, min=0, default='0.0 m')
            # Depth
            y = quantity(units=m, min=0, default='0.0 m')
            # Lithologies at the reference point
            lithologies = string_list(default=list(lithoalias1, lithoalias2))
    [Lithologies]
        
        # More Lythologies can be added with the same syntax:
        # ********************************************
        # * WARNING: do NOT use already used aliases *
        # ********************************************
        [[__many__]]
            # AD
            AD = quantity(units=1 / s / Pa, default='0.00033 1 / s / Pa')
            # a
            a = quantity(units=W / m, default='474 W / m')
            # Layer alias
            alias = string(default='MUST_BE_DEFINED')
            # Cohesion 0
            cohesion_0 = quantity(units=Pa, default='1000000.0 Pa')
            # Cohesion 1
            cohesion_1 = quantity(units=Pa, default='1000000.0 Pa')
            # Compressibility
            compressibility = quantity(units=1 / Pa, default='1e-11 1 / Pa')
            # Standard density
            density = quantity(units=kg / m**3, default='300.0 kg / m**3')
            # Ea
            Ea = quantity(units=J / mol, default='238000 J / mol')
            # Epsilon 0
            epsilon_0 = quantity(units=dimensionless, default='0 dimensionless')
            # Epsilon 1
            epsilon_1 = quantity(units=dimensionless, default='0.1 dimensionless')
            # Heat Capacity
            heat_capacity = quantity(units=J / kg, default='1000 J / kg')
            # Heterogeneity params: mean, std, min, max
            heterogeneity = string_list(default=list(0, 0, 0, 0))
            # Radiogenic heat production
            hr = quantity(units=W / m**3, default='5e-07 W / m**3')
            # k0
            k0 = quantity(units=W / m / K, default='1.18 W / m / K')
            # Melt density
            melt_density = quantity(units=kg / m**3, default='2700.0 kg / m**3')
            # Melt Viscosity
            melt_viscosity = quantity(units=Pa * s, default='0 Pa * s')
            # n
            n = quantity(units=dimensionless, default='3.2 dimensionless')
            # Apply Peierls
            peierls = boolean(default=False)
            # Phase change file
            phase_change = string(default='')
            # Phi 0
            phi_0 = quantity(units=deg, default='0.2 deg')
            # Phi 1
            phi_1 = quantity(units=deg, default='0.0 deg')
            # Polygons defined by their vertices, one per line,
            # separated by nl
            polygons = string(default='')
            # Use power law
            power_law = boolean(default=True)
            # Rock type
            rock_type = option(none, felsic, mafic, default=none)
            # Scaling Factor
            scaling_factor = quantity(units=dimensionless, default='0 dimensionless')
            # Scaling Factor Equation
            scaling_factor_eq = option(none, triaxial_compression, simple_shear, default=none)
            # Shear modulus
            shear_modulus = quantity(units=Pa, default='10000000000.0 Pa')
            # SolidusEquation ID
            SolidusEquation = quantity(units=dimensionless, default='-1 dimensionless')
            # Thermal expansion
            thermal_expansion = quantity(units=1 / K, default='3e-05 1 / K')
            # Multiplyer factor for units in polygons
            units_multiplyer = quantity(units=m, default='1000 m')
            # Activation Volume
            Va = quantity(units=m**3, default='0.0 m**3')
            # Viscosity
            viscosity = quantity(units=Pa * s, default='0.0 Pa * s')
            # Alias rock of wet status
            wet = string(default='')
            # Alias rock of dry status
            dry = string(default='')
            # Pore fluid pressure factor
            lambda = quantity(units=dimensionless, default='1.0 dimensionless')
            # Alternative pore fluid pressure factor
            lambda2 = quantity(units=dimensionless, default='1.0 dimensionless')
            # Fluid model for the layer
            fluid = option(none, wet, dry/wet, default=none)
    [Geothermic Model]
        # Surface temperature
        T0 = quantity(units=degC, default='0.0 degC')
        # Bottom temperature
        T1 = quantity(units=degC, default='1475.0 degC')
        [[geotherm0]]
            # Layer age
            age = quantity(units=year, default='0.0 year')
            # Thermal gradient
            dtz = quantity(units=K / kilometer, default='0.0 K / kilometer')
            # Thermal disturbance
            dt = quantity(units=K, default='0.0 K')
            # Thermal diffusivity
            kappa = quantity(units=m**2 / s, default='0.0 m**2 / s')
            # Geothermic Model type
            model = option(adiabatic, constant, radiogenic, linear, plate, half-space, continent, cont/oce, interpolated, anomaly, default=adiabatic)
            # Polygon defined by their vertices, one per line, separated by nl
            polygon = string(default='')
            # Radius of anomaly
            radius = quantity(units=kilometer, default='0.0 kilometer')
            # Direction of anomaly is right to left
            rtol = boolean(default=False)
            # Surface temperature of layer
            T0 = quantity(units=degC, default='0.0 degC')
            # Bottom temperature of layer
            T1 = quantity(units=degC, default='0.0 degC')
            # List / tuple of temperature values with units enclosed in quotes
            Ti = quantity(units=degC, min=-273, max=2000, default='(0.0, 100.0) degC')
            # Constant layer temperature
            value = quantity(units=degC, default='0.0 degC')
            # Center position of thermal anomaly: x
            x0 = quantity(units=kilometer, default='0.0 kilometer')
            # Center position of thermal anomaly: y
            y0 = quantity(units=kilometer, default='0.0 kilometer')
            # Thermal Plate thickness
            yL = quantity(units=kilometer, default='0.0 kilometer')
            # Radiogenic production
            H = quantity(units=W * m**2, default='0.0 W * m**2')
            # Length scale of radiogenic production
            hr = quantity(units=kilometer, default='0.0 kilometer')
            # Thermal conductivity
            kd = quantity(units=W / m / K, default='0.0 W / m / K')
            # Surface heat flow
            Qs = quantity(units=W / m**2, default='0.0 W / m**2')
            # Min oceanic depth
            ocemin = quantity(units=m, default='0.0 m')
        # More geothermic blocks can be added with the same syntax:
        [[__many__]]
            # Layer age
            age = quantity(units=year, default='0.0 year')
            # Thermal gradient
            dtz = quantity(units=K / kilometer, default='0.0 K / kilometer')
            # Thermal disturbance
            dt = quantity(units=K, default='0.0 K')
            # Thermal diffusivity
            kappa = quantity(units=m**2 / s, default='0.0 m**2 / s')
            # Geothermic Model type
            model = option(adiabatic, constant, radiogenic, linear, plate, half-space, continent, cont/oce, interpolated, anomaly, default=adiabatic)
            # Polygon defined by their vertices, one per line, separated by nl
            polygon = string(default='')
            # Radius of anomaly
            radius = quantity(units=kilometer, default='0.0 kilometer')
            # Direction of anomaly is right to left
            rtol = boolean(default=False)
            # Surface temperature of layer
            T0 = quantity(units=degC, default='0.0 degC')
            # Bottom temperature of layer
            T1 = quantity(units=degC, default='0.0 degC')
            # List / tuple of temperature values with units enclosed in quotes
            Ti = quantity(units=degC, min=-273, max=2000, default='(0.0, 100.0) degC')
            # Constant layer temperature
            value = quantity(units=degC, default='0.0 degC')
            # Center position of thermal anomaly: x
            x0 = quantity(units=kilometer, default='0.0 kilometer')
            # Center position of thermal anomaly: y
            y0 = quantity(units=kilometer, default='0.0 kilometer')
            # Thermal Plate thickness
            yL = quantity(units=kilometer, default='0.0 kilometer')
            # Radiogenic production
            H = quantity(units=W * m**2, default='0.0 W * m**2')
            # Length scale of radiogenic production
            hr = quantity(units=kilometer, default='0.0 kilometer')
            # Thermal conductivity
            kd = quantity(units=W / m / K, default='0.0 W / m / K')
            # Surface heat flow
            Qs = quantity(units=W / m**2, default='0.0 W / m**2')
            # Min oceanic depth
            ocemin = quantity(units=m, default='0.0 m')
    [Boundary Conditions]
        [[Left]]
            # Horizontal velocity with sign (positive means to the right)
            vx = quantity(units=m / s, default='0.0 m / s')
            # Vertical velocity with sign (positive means downward)
            vy = quantity(units=m / s, default='0.0 m / s')
            # All velocity components 0 on the boundary
            noslip = boolean(default=False)
            # Constant Temperature
            T = quantity(units=degC, default='0.0 degC')
            # Simmetric Temperature (no heat flow)
            simmetricT = boolean(default=True)
            # Constant Pressure
            P = quantity(units=Pa, default='0.0 Pa')
            # Starting evolution step for this set of parameters
            start = integer(min=0, default=0)
            # Many sections can be added with the same syntax:
            [[[__many__]]]
                # Horizontal velocity with sign (positive means to the right)
                vx = quantity(units=m / s, default='0.0 m / s')
                # Vertical velocity with sign (positive means downward)
                vy = quantity(units=m / s, default='0.0 m / s')
                # All velocity components 0 on the boundary
                noslip = boolean(default=False)
                # Constant Temperature
                T = quantity(units=degC, default='0.0 degC')
                # Simmetric Temperature (no heat flow)
                simmetricT = boolean(default=True)
                # Constant Pressure
                P = quantity(units=Pa, default='0.0 Pa')
                # Starting evolution step for this set of parameters
                start = integer(min=0, default=0)
        [[Right]]
            # Horizontal velocity with sign (positive means to the right)
            vx = quantity(units=m / s, default='0.0 m / s')
            # Vertical velocity with sign (positive means downward)
            vy = quantity(units=m / s, default='0.0 m / s')
            # All velocity components 0 on the boundary
            noslip = boolean(default=False)
            # Constant Temperature
            T = quantity(units=degC, default='0.0 degC')
            # Simmetric Temperature (no heat flow)
            simmetricT = boolean(default=True)
            # Constant Pressure
            P = quantity(units=Pa, default='0.0 Pa')
            # Starting evolution step for this set of parameters
            start = integer(min=0, default=0)
            # Many sections can be added with the same syntax:
            [[[__many__]]]
                # Horizontal velocity with sign (positive means to the right)
                vx = quantity(units=m / s, default='0.0 m / s')
                # Vertical velocity with sign (positive means downward)
                vy = quantity(units=m / s, default='0.0 m / s')
                # All velocity components 0 on the boundary
                noslip = boolean(default=False)
                # Constant Temperature
                T = quantity(units=degC, default='0.0 degC')
                # Simmetric Temperature (no heat flow)
                simmetricT = boolean(default=True)
                # Constant Pressure
                P = quantity(units=Pa, default='0.0 Pa')
                # Starting evolution step for this set of parameters
                start = integer(min=0, default=0)
        [[Top]]
            # Horizontal velocity with sign (positive means to the right)
            vx = quantity(units=m / s, default='0.0 m / s')
            # Vertical velocity with sign (positive means downward)
            vy = quantity(units=m / s, default='0.0 m / s')
            # All velocity components 0 on the boundary
            noslip = boolean(default=False)
            # Constant Temperature
            T = quantity(units=degC, default='0.0 degC')
            # Simmetric Temperature (no heat flow)
            simmetricT = boolean(default=False)
            # Constant Pressure
            P = quantity(units=Pa, default='0.0 Pa')
            # Starting evolution step for this set of parameters
            start = integer(min=0, default=0)
            # Many sections can be added with the same syntax:
            [[[__many__]]]
                # Horizontal velocity with sign (positive means to the right)
                vx = quantity(units=m / s, default='0.0 m / s')
                # Vertical velocity with sign (positive means downward)
                vy = quantity(units=m / s, default='0.0 m / s')
                # All velocity components 0 on the boundary
                noslip = boolean(default=False)
                # Constant Temperature
                T = quantity(units=degC, default='0.0 degC')
                # Simmetric Temperature (no heat flow)
                simmetricT = boolean(default=False)
                # Constant Pressure
                P = quantity(units=Pa, default='0.0 Pa')
                # Starting evolution step for this set of parameters
                start = integer(min=0, default=0)
        [[Bottom]]
            # Horizontal velocity with sign (positive means to the right)
            vx = quantity(units=m / s, default='0.0 m / s')
            # Vertical velocity with sign (positive means downward)
            vy = quantity(units=m / s, default='0.0 m / s')
            # All velocity components 0 on the boundary
            noslip = boolean(default=False)
            # Constant Temperature
            T = quantity(units=degC, default='0.0 degC')
            # Simmetric Temperature (no heat flow)
            simmetricT = boolean(default=False)
            # Constant Pressure
            P = quantity(units=Pa, default='0.0 Pa')
            # Starting evolution step for this set of parameters
            start = integer(min=0, default=0)
            # Many sections can be added with the same syntax:
            [[[__many__]]]
                # Horizontal velocity with sign (positive means to the right)
                vx = quantity(units=m / s, default='0.0 m / s')
                # Vertical velocity with sign (positive means downward)
                vy = quantity(units=m / s, default='0.0 m / s')
                # All velocity components 0 on the boundary
                noslip = boolean(default=False)
                # Constant Temperature
                T = quantity(units=degC, default='0.0 degC')
                # Simmetric Temperature (no heat flow)
                simmetricT = boolean(default=False)
                # Constant Pressure
                P = quantity(units=Pa, default='0.0 Pa')
                # Starting evolution step for this set of parameters
                start = integer(min=0, default=0)
    [Topography]
        # Enable topography
        enabled = boolean(default=False)
        # Water level ???
        waterlevel = quantity(units=m, min=0, default='0.0 m')
        # Topography resolution (number of nodes)
        nx = integer(min=0, max=999, default=0)
        # Length of topography
        size = quantity(units=m, min=0, max=10000, default='0.0 m')
    [Peierls]
        # Sigma ???
        sigma = quantity(units=Pa, default='9100000000.0 Pa')
        # A ???
        A = quantity(units=Pa ** -2 * s ** -1, default='6.3e-05 Pa ** -2 * s ** -1')
        # m ???
        m = quantity(units=dimensionless, default='1 dimensionless')
        # n ???
        n = quantity(units=dimensionless, default='2 dimensionless')
        # Critical Pressure
        Pr_crit = quantity(units=Pa, default='200000000.0 Pa')
        # Critical Temperature
        T_crit = quantity(units=degC, min=-273.16, max=2000, default='1100 degC')
    [Fluid]
        # Enable fluid content in rocks
        enabled = boolean(default=False)
        # Fluid threshold for switching from dry to wet behaviour
        threshold = float(min=0, max=99.9, default=0.1)
        # Choose velocty model among Darcy and Fixed
        velocity_model = option(Darcy, Gradient, default=Darcy)
        # Choose rheology model among DryWet and Arcay
        rheology_model = option(DryWet, Arcay, default=DryWet)
        # minimum depth of fluid tracers
        minDepth = quantity(units=meter, default='10000.0 meter')
        [[Darcy]]
            # Porosity
            porosity = quantity(units=dimensionless, default='0.01 dimensionless')
            # Permeability
            permeability = quantity(units=m**2, default='1e-18 m**2')
            # Fluid phase density
            fluid_density = quantity(units=kg / m**3, default='1000.0 kg / m**3')
            # Fluid phase viscosity
            fluid_viscosity = quantity(units=Pa * s, default='0.0001 Pa * s')